[gd_scene load_steps=10 format=2]

[ext_resource path="res://Other/banner.png" type="Texture" id=1]
[ext_resource path="res://theme.tres" type="Theme" id=2]
[ext_resource path="res://Other/ScreenFont.tres" type="DynamicFont" id=3]
[ext_resource path="res://Scenes/DeathScreen.gd" type="Script" id=4]
[ext_resource path="res://Sounds/horror_loop.WAV" type="AudioStream" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
//inputs
uniform float AMT = 0.7; //0 - 1 glitch amount
uniform float SPEED = 0.6; //0 - 1 speed

//2D (returns 0 - 1)
float random2d(vec2 n) { 
    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float randomRange (in vec2 seed, in float min, in float max) {
		return min + random2d(seed) * (max - min);
}

// return 1 if v inside 1d range
float insideRange(float v, float bottom, float top) {
   return step(bottom, v) - step(top, v);
}


   
void fragment()
{
  float time = floor(TIME * SPEED * 60.0);    
	vec2 uv = SCREEN_UV;//fragCoord.xy / iResolution.xy;
    
    //copy orig
    vec3 outCol = texture(SCREEN_TEXTURE, uv).rgb;
    
    //randomly offset slices horizontally
    float maxOffset = AMT/2.0;
    for (float i = 0.0; i < 10.0 * AMT; i += 1.0) {
        float sliceY = random2d(vec2(time , 2345.0 + float(i)));
        float sliceH = random2d(vec2(time , 9035.0 + float(i))) * 0.25;
        float hOffset = randomRange(vec2(time , 9625.0 + float(i)), -maxOffset, maxOffset);
        vec2 uvOff = uv;
        uvOff.x += hOffset;
        if (insideRange(uv.y, sliceY, fract(sliceY+sliceH)) == 1.0 ){
        	outCol = texture(SCREEN_TEXTURE, uvOff).rgb;
        }
    }
    
    //do slight offset on one entire channel
    float maxColOffset = AMT/6.0;
    float rnd = random2d(vec2(time , 9545.0));
    vec2 colOffset = vec2(randomRange(vec2(time , 9545.0),-maxColOffset,maxColOffset), 
                       randomRange(vec2(time , 7205.0),-maxColOffset,maxColOffset));
    if (rnd < 0.33){
        outCol.r = texture(SCREEN_TEXTURE, uv + colOffset).r;
        
    }else if (rnd < 0.66){
        outCol.g = texture(SCREEN_TEXTURE, uv + colOffset).g;
        
    } else{
        outCol.b = texture(SCREEN_TEXTURE, uv + colOffset).b;  
    }
       
	COLOR = vec4(outCol,1.0);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/AMT = 0.02
shader_param/SPEED = 0.6

[sub_resource type="Animation" id=3]
resource_name = "fade_in"
length = 6.0
tracks/0/type = "bezier"
tracks/0/path = NodePath("Fade:color:a")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0, 0, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 2.5, 6 )
}
tracks/1/type = "value"
tracks/1/path = NodePath("Theme:playing")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ false, true ]
}

[sub_resource type="Animation" id=4]
resource_name = "fade_out"
tracks/0/type = "bezier"
tracks/0/path = NodePath("Fade:color:a")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 0, -0.25, 0, 0.25, 0, 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1 )
}
tracks/1/type = "value"
tracks/1/path = NodePath("Theme:volume_db")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ -5.0, -80.0 ]
}

[node name="DeathScreen" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 1 )
expand = true
stretch_mode = 7

[node name="Retry" type="Button" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 256.0
margin_top = -104.0
margin_right = 448.0
margin_bottom = -40.0
theme = ExtResource( 2 )
text = "RETRY"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Menu" type="Button" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = 256.0
margin_top = 24.0
margin_right = 448.0
margin_bottom = 88.0
theme = ExtResource( 2 )
text = "MENU"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -576.0
margin_top = -360.0
margin_right = -128.0
margin_bottom = 360.0
custom_fonts/font = ExtResource( 3 )
text = "END
OF
THE
LINE"
align = 1
valign = 1

[node name="Glitch" type="ColorRect" parent="."]
material = SubResource( 2 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/fade_in = SubResource( 3 )
anims/fade_out = SubResource( 4 )

[node name="Fade" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Theme" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 5 )
volume_db = -5.0
bus = "Reverb"

[connection signal="pressed" from="Retry" to="." method="_on_Retry_pressed"]
[connection signal="pressed" from="Menu" to="." method="_on_Menu_pressed"]
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
